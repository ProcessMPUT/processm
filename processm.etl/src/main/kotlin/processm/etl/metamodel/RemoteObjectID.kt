package processm.etl.metamodel

import org.jetbrains.exposed.dao.id.EntityID
import processm.dbmodels.models.Classes

/**
 * An identifier of an object in a remote database.
 *
 * @param [objectId] Unique ID of the object in its table in the remote database
 * @param [classId] Identifier of the object's table as an entity ID of [Classes]
 */
data class RemoteObjectID(val objectId: String, val classId: EntityID<Int>) {
    companion object {
        const val DELIMITER = '_'
    }

    /**
     * Returns a string representation of the object. It can be uniquely parsed back using [String.parseAsRemoteObjectID]
     */
    inline fun toDB() = "${classId}${DELIMITER}$objectId"
}

/**
 * Parse the string representation generated by [RemoteObjectID.toDB] back to [RemoteObjectID]
 */
inline fun String.parseAsRemoteObjectID(): RemoteObjectID {
    val a = split(RemoteObjectID.DELIMITER, limit = 2)
    return RemoteObjectID(a[1], EntityID(a[0].toInt(), Classes))
}