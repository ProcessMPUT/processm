openapi: 3.0.3
info:
  title: Processm
  description: Description of api methods used in processm.
  version: 1.0.0
servers:
  - url: /api
tags:
  - name: config
    description: System configuration
  - name: users
    description: User registration and session management
  - name: workspaces
    description: User workspaces management
  - name: groups
    description: User groups and groups membership management
  - name: organizations
    description: User organizations and organizations membership management
  - name: dataStores
    description: Data stores management
  - name: logs
    description: Log data management
paths:
  /config:
    get:
      tags:
        - config
      summary: Get system configuration
      operationId: getConfig
      responses:
        '200':
          description: Successful response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Config'
  /users:
    get:
      tags:
        - users
      summary: Get users associated with the current user by organization membership
      operationId: getUsers
      responses:
        '200':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserInfoCollectionMessageBody'
      security:
        - bearerAuth: []
    post:
      tags:
        - users
      summary: Register account
      operationId: createAccount
      requestBody:
        description: User email and organization name
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/AccountRegistrationInfoMessageBody'
        required: true
      responses:
        '201':
          description: Successful operation
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
  /users/session:
    post:
      tags:
        - users
      summary: User authentication
      operationId: signUserIn
      parameters:
        - in: header
          name: Authorization
          description: Expired authentication token
          required: false
          schema:
            type: string
      requestBody:
        description: User account credentials
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UserCredentialsMessageBody'
        required: false
      responses:
        '201':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/AuthenticationResultMessageBody'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - users
      summary: Session termination
      operationId: signUserOut
      responses:
        '204':
          description: user successfully logged out
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /users/me:
    get:
      tags:
        - users
      summary: Get details about current user
      operationId: getUserAccountDetails
      responses:
        '200':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserAccountInfoMessageBody'
      security:
        - bearerAuth: []
  /users/me/password:
    patch:
      tags:
        - users
      summary: Change user password
      operationId: changeUserPassword
      requestBody:
        description: Current and new password
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/PasswordChangeMessageBody'
        required: true
      responses:
        '200':
          description: Successful operation
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /users/me/locale:
    patch:
      tags:
        - users
      summary: Change user locale
      operationId: changeUserLocale
      requestBody:
        description: New locale in ICU format (e.g. en_US)
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/LocaleChangeMessageBody'
        required: true
      responses:
        '200':
          description: Successful operation
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /users/me/organizations:
    get:
      tags:
        - users
      summary: Get organizations which the current user is a member of
      operationId: getUserOrganizations
      responses:
        '200':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserOrganizationCollectionMessageBody'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /organizations/{organizationId}/data-stores:
    parameters:
      - name: organizationId
        in: path
        description: Organization ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - dataStores
      summary: Get all data stores assigned to given OrganizationID and to the calling User
      operationId: getDataStores
      responses:
        '200':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/DataStoreCollectionMessageBody'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
    post:
      tags:
        - dataStores
      summary: Create a new data store in the context of the specified organization and user
      operationId: createDataStore
      requestBody:
        description: Data store details
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/DataStoreMessageBody'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/DataStoreMessageBody'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /organizations/{organizationId}/data-stores/{dataStoreId}:
    parameters:
      - name: organizationId
        in: path
        description: Organization ID
        required: true
        schema:
          type: string
          format: uuid
      - name: dataStoreId
        in: path
        description: Data store ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - dataStores
      summary: Get the specified data store
      operationId: getDataStore
      responses:
        '200':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/DataStoreMessageBody'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
    patch:
      tags:
        - dataStores
      summary: Update the specified data store
      operationId: updateDataStore
      requestBody:
        description: An object containing data store details to be updated
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/DataStoreMessageBody'
      responses:
        '204':
          description: Successful operation
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
    delete:
      tags:
        - dataStores
      summary: Remove the specified data store
      operationId: deleteDataStore
      responses:
        '204':
          description: Successful operation
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /organizations/{organizationId}/data-stores/{dataStoreId}/data-connectors:
    parameters:
      - name: organizationId
        in: path
        description: Organization ID
        required: true
        schema:
          type: string
          format: uuid
      - name: dataStoreId
        in: path
        description: Data store ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - dataStores
      summary: Get all data connectors assigned to the given data store
      operationId: getDataConnectors
      responses:
        '200':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/DataConnectorCollectionMessageBody'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
    post:
      tags:
        - dataStores
      summary: Create a new data connector assigned to the specified data store
      operationId: createDataConnector
      requestBody:
        description: Data connector details
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/DataConnectorMessageBody'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/DataConnectorMessageBody'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /organizations/{organizationId}/data-stores/{dataStoreId}/data-connectors/{dataConnectorId}:
    parameters:
      - name: organizationId
        in: path
        description: Organization ID
        required: true
        schema:
          type: string
          format: uuid
      - name: dataStoreId
        in: path
        description: Data store ID
        required: true
        schema:
          type: string
          format: uuid
      - name: dataConnectorId
        in: path
        description: Data connector ID
        required: true
        schema:
          type: string
          format: uuid
    patch:
      tags:
        - dataStores
      summary: Update the specified data connector
      operationId: updateDataConnector
      requestBody:
        description: An object containing data container details to be updated
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/DataConnectorMessageBody'
      responses:
        '204':
          description: Successful operation
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
    delete:
      tags:
        - dataStores
      summary: Remove the specified data connector
      operationId: deleteDataConnector
      responses:
        '204':
          description: Successful operation
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /organizations/{organizationId}/data-stores/{dataStoreId}/data-connectors/test:
    parameters:
      - name: organizationId
        in: path
        description: Organization ID
        required: true
        schema:
          type: string
          format: uuid
      - name: dataStoreId
        in: path
        description: Data store ID
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - dataStores
      summary: Tests data connector's configuration connectivity.
      operationId: testDataConnector
      requestBody:
        description: Data connector configuration
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/DataConnectorMessageBody'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/DataConnectorConnectivityMessageBody'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /organizations/{organizationId}/data-stores/{dataStoreId}/data-connectors/{dataConnectorId}/case-notions:
    parameters:
      - name: organizationId
        in: path
        description: Organization ID
        required: true
        schema:
          type: string
          format: uuid
      - name: dataStoreId
        in: path
        description: Data store ID
        required: true
        schema:
          type: string
          format: uuid
      - name: dataConnectorId
        in: path
        description: Data connector ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - dataStores
      summary: Get suggested case notions for the specified data connector
      operationId: getCaseNotionSuggestions
      responses:
        '200':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CaseNotionCollectionMessageBody'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /organizations/{organizationId}/data-stores/{dataStoreId}/data-connectors/{dataConnectorId}/relationship-graph:
    parameters:
      - name: organizationId
        in: path
        description: Organization ID
        required: true
        schema:
          type: string
          format: uuid
      - name: dataStoreId
        in: path
        description: Data store ID
        required: true
        schema:
          type: string
          format: uuid
      - name: dataConnectorId
        in: path
        description: Data connector ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - dataStores
      summary: Get relationship graph for the specified data connector
      operationId: getRelationshipGraph
      responses:
        '200':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CaseNotionMessageBody'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /organizations/{organizationId}/data-stores/{dataStoreId}/etl-processes:
    parameters:
      - name: organizationId
        in: path
        description: Organization ID
        required: true
        schema:
          type: string
          format: uuid
      - name: dataStoreId
        in: path
        description: Data store ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - dataStores
      summary: Get all ETL processes assigned to the given data store
      operationId: getEtlProcesses
      responses:
        '200':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/EtlProcessCollectionMessageBody'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
    post:
      tags:
        - dataStores
      summary: Create a new ETL process assigned to the specified data store
      operationId: createEtlProcess
      requestBody:
        description: ETL process details
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/EtlProcessMessageBody'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/EtlProcessMessageBody'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /organizations/{organizationId}/data-stores/{dataStoreId}/etl-processes/{etlProcessId}:
    parameters:
      - name: organizationId
        in: path
        description: Organization ID
        required: true
        schema:
          type: string
          format: uuid
      - name: dataStoreId
        in: path
        description: Data store ID
        required: true
        schema:
          type: string
          format: uuid
      - name: etlProcessId
        in: path
        description: ETL process ID
        required: true
        schema:
          type: string
          format: uuid
    delete:
      tags:
        - dataStores
      summary: Remove the specified ETL process
      operationId: deleteEtlProcess
      responses:
        '204':
          description: Successful operation
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /organizations/{organizationId}/workspaces:
    parameters:
      - name: organizationId
        in: path
        description: Organization ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - workspaces
      summary: Get all workspaces available to the calling user in the context of the specified organization
      operationId: getWorkspaces
      responses:
        '200':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/WorkspaceCollectionMessageBody'
      security:
        - bearerAuth: []
    post:
      tags:
        - workspaces
      summary: Create a new workspace in the context of the specified organization
      operationId: createWorkspace
      requestBody:
        description: Workspace details
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/WorkspaceMessageBody'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/WorkspaceMessageBody'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
  /organizations/{organizationId}/workspaces/{workspaceId}:
    parameters:
      - name: organizationId
        in: path
        description: Organization ID
        required: true
        schema:
          type: string
          format: uuid
      - name: workspaceId
        in: path
        description: Workspace ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - workspaces
      summary: Get the specified workspace in the context of the specified organization
      operationId: getWorkspace
      responses:
        '200':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/WorkspaceMessageBody'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
    put:
      tags:
        - workspaces
      summary: Update the specified workspace in the context of the specified organization
      operationId: updateWorkspace
      requestBody:
        description: Workspace details to update
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/WorkspaceMessageBody'
        required: true
      responses:
        '204':
          description: Successful operation
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
    delete:
      tags:
        - workspaces
      summary: Remove the specified workspace in the context of the specified organization
      operationId: deleteWorkspace
      responses:
        '204':
          description: Successful operation
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /organizations/{organizationId}/workspaces/{workspaceId}/components:
    parameters:
      - name: organizationId
        in: path
        description: Organization ID
        required: true
        schema:
          type: string
          format: uuid
      - name: workspaceId
        in: path
        description: Workspace ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - workspaces
        - components
      summary: Get all components available to the calling user in the specified workspace in the context of the specified organization
      operationId: getWorkspaceComponents
      responses:
        '200':
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ComponentCollectionMessageBody'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /organizations/{organizationId}/workspaces/{workspaceId}/components/{componentId}:
    parameters:
      - name: organizationId
        in: path
        description: Organization ID
        required: true
        schema:
          type: string
          format: uuid
      - name: workspaceId
        in: path
        description: Workspace ID
        required: true
        schema:
          type: string
          format: uuid
      - name: componentId
        in: path
        description: Component ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - workspaces
        - components
      summary: Get the specified component in the specified workspace in the context of the specified organization
      operationId: getWorkspaceComponent
      responses:
        '200':
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ComponentMessageBody'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
    put:
      tags:
        - workspaces
        - components
      summary: Add or update the specified component in the specified workspace in the context of the specified organization
      operationId: addOrUpdateWorkspaceComponent
      requestBody:
        description: Component details to update
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ComponentMessageBody'
        required: true
      responses:
        '204':
          description: successful operation
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
    delete:
      tags:
        - workspaces
        - components
      summary: Remove the specified component in the specified workspace in the context of the specified organization
      operationId: removeWorkspaceComponent
      responses:
        '204':
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ComponentMessageBody'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /organizations/{organizationId}/workspaces/{workspaceId}/components/{componentId}/data:
    parameters:
      - name: organizationId
        in: path
        description: Organization ID
        required: true
        schema:
          type: string
          format: uuid
      - name: workspaceId
        in: path
        description: Workspace ID
        required: true
        schema:
          type: string
          format: uuid
      - name: componentId
        in: path
        description: Component ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - workspaces
        - components
      summary: Get data of the specified component in the specified workspace in the context of the specified organization
      operationId: getWorkspaceComponentData
      responses:
        '200':
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ComponentDataMessageBody'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /organizations/{organizationId}/workspaces/{workspaceId}/layout:
    parameters:
      - name: organizationId
        in: path
        description: Organization ID
        required: true
        schema:
          type: string
          format: uuid
      - name: workspaceId
        in: path
        description: Workspace ID
        required: true
        schema:
          type: string
          format: uuid
    patch:
      tags:
        - workspaces
      summary: Update size and position of the specified components
      operationId: updateWorkspaceLayout
      requestBody:
        description: An object containing new size and position of updated components
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/LayoutCollectionMessageBody'
      responses:
        '204':
          description: Successful operation
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /groups:
    get:
      tags:
        - groups
      summary: Get groups belonging to the current user's organization
      operationId: getGroups
      responses:
        '200':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/GroupCollectionMessageBody'
      security:
        - bearerAuth: []
    post:
      tags:
        - groups
      summary: Create user group
      operationId: createGroup
      requestBody:
        description: Group details
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/GroupMessageBody'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/GroupMessageBody'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
  /groups/{groupId}:
    parameters:
      - name: groupId
        in: path
        description: Group ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - groups
      summary: Get the specified group
      operationId: getGroup
      responses:
        '200':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/GroupMessageBody'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
    put:
      tags:
        - groups
      summary: Update specified group
      operationId: updateGroup
      requestBody:
        description: Group details
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/GroupMessageBody'
        required: true
      responses:
        '204':
          description: Successful operation
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
    delete:
      tags:
        - groups
      summary: Remove user group
      operationId: removeGroup
      responses:
        '204':
          description: Successful operation
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /groups/{groupId}/members:
    parameters:
      - name: groupId
        in: path
        description: Group ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - groups
      summary: Get members of the specified group
      operationId: getGroupMembers
      responses:
        '200':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserInfoCollectionMessageBody'
      security:
        - bearerAuth: []
    post:
      tags:
        - groups
      summary: Add new member to the specified group
      operationId: addGroupMember
      requestBody:
        description: New member ID
        content:
          'application/json':
            schema:
              description: User ID
              type: string
              format: uuid
        required: true
      responses:
        '201':
          description: Successful operation
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /groups/{groupId}/members/{userId}:
    parameters:
      - name: groupId
        in: path
        description: Group ID
        required: true
        schema:
          type: string
          format: uuid
      - name: userId
        in: path
        description: User ID
        required: true
        schema:
          type: string
          format: uuid
    delete:
      tags:
        - groups
      summary: Remove member from the specified group
      operationId: removeGroupMember
      responses:
        '204':
          description: Successful operation
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /groups/{groupId}/subgroups:
    parameters:
      - name: groupId
        in: path
        description: Group ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - groups
      summary: Get subgroups of the specified group
      operationId: getSubgroups
      responses:
        '200':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/GroupCollectionMessageBody'
      security:
        - bearerAuth: []
    post:
      tags:
        - groups
      summary: Create new subgroup
      operationId: createSubgroup
      requestBody:
        description: Subgroup details
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/GroupMessageBody'
        required: true
      responses:
        '201':
          description: Successful operation
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
      security:
        - bearerAuth: []
  /groups/{groupId}/subgroups/{subgroupId}:
    parameters:
      - name: groupId
        in: path
        description: Group ID
        required: true
        schema:
          type: string
          format: uuid
      - name: subgroupId
        in: path
        description: Subgroup ID
        required: true
        schema:
          type: string
          format: uuid
    delete:
      tags:
        - groups
      summary: Remove the specified subgroup
      operationId: removeSubgroup
      responses:
        '204':
          description: Successful operation
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /organizations:
    get:
      tags:
        - organizations
      summary: Get organizations
      operationId: getOrganizations
      responses:
        '200':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/OrganizationCollectionMessageBody'
      security:
        - bearerAuth: []
    post:
      tags:
        - organizations
      summary: Create organization
      operationId: createOrganization
      requestBody:
        description: Organization details
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/OrganizationMessageBody'
        required: true
      responses:
        '201':
          description: Successful operation
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
      security:
        - bearerAuth: []
  /organizations/{organizationId}:
    parameters:
      - name: organizationId
        in: path
        description: Organization ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - organizations
      summary: Get the specified organization
      operationId: getOrganization
      responses:
        '200':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/OrganizationMessageBody'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
    put:
      tags:
        - organizations
      summary: Update specified organization
      operationId: updateOrganization
      requestBody:
        description: Organization details
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/OrganizationMessageBody'
        required: true
      responses:
        '204':
          description: Successful operation
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
    delete:
      tags:
        - organizations
      summary: Remove the specified organization
      operationId: removeOrganization
      responses:
        '204':
          description: Successful operation
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /organizations/{organizationId}/members:
    parameters:
      - name: organizationId
        in: path
        description: Organization ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - organizations
      summary: Get members of the specified organization
      operationId: getOrganizationMembers
      responses:
        '200':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/OrganizationMemberCollectionMessageBody'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
    post:
      tags:
        - organizations
      summary: Add new member to the specified organization
      operationId: addOrganizationMember
      requestBody:
        description: New member username
        content:
          'application/json':
            schema:
              description: Username
              type: string
        required: true
      responses:
        '201':
          description: Successful operation
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
      security:
        - bearerAuth: []
  /organizations/{organizationId}/members/{userId}:
    parameters:
      - name: organizationId
        in: path
        description: Organization ID
        required: true
        schema:
          type: string
          format: uuid
      - name: userId
        in: path
        description: User ID
        required: true
        schema:
          type: string
          format: uuid
    delete:
      tags:
        - organizations
      summary: Remove member from the specified organization
      operationId: removeOrganizationMember
      responses:
        '204':
          description: Successful operation
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /organizations/{organizationId}/groups:
    parameters:
      - name: organizationId
        in: path
        description: Organization ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - organizations
      summary: Get groups associated with the specified organization
      operationId: getOrganizationGroups
      responses:
        '200':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/GroupCollectionMessageBody'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /data-stores/{dataStoreId}/logs:
    parameters:
      - name: dataStoreId
        in: path
        description: Data store ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - dataStores
        - logs
      summary: Query logs stored in the specified data store
      operationId: submitLogsQuery
      parameters:
        - in: header
          name: Accept
          schema:
            type: string
            enum:
              - "application/json"
              - "application/zip"
          required: true
        - in: query
          name: query
          schema:
            type: string
          description: The query to be submitted
          required: false
      responses:
        '200':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/QueryResultCollectionMessageBody'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      security:
        - bearerAuth: []
    post:
      tags:
        - dataStores
        - logs
      summary: Upload new log file to the specified data store
      operationId: uploadLogFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fileName:
                  type: string
                  format: binary
      responses:
        '201':
          description: Successful operation
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
  /data-stores/{dataStoreId}/logs/{identityId}:
    parameters:
      - name: dataStoreId
        in: path
        description: Data store ID
        required: true
        schema:
          type: string
          format: uuid
      - name: identityId
        in: path
        description: Value of identity:id attribute
        required: true
        schema:
          type: string
          format: uuid
    delete:
      tags:
        - dataStores
        - logs
      summary: Remove XES log from the specified data store
      operationId: removeLog
      responses:
        '204':
          description: Successful operation
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
components:
  schemas:
    Config:
      type: object
      required: [loginMessage, demoMode]
      properties:
        loginMessage:
          type: string
          default: ""
          description: Message to show on login screen. May be empty.
        demoMode:
          type: boolean
          description: Switches modes of operation of certain components into demo mode (e.g., less secure).
          default: false
    ErrorMessageBody:
      type: object
      required: [error]
      properties:
        error:
          description: Error details
          type: string
    OrganizationRole:
      type: string
      enum: [owner, writer, reader]
    GroupRole:
      type: string
      enum: [owner, writer, reader]
    ComponentType:
      type: string
      enum: [kpi, causalNet]
    AccountRegistrationInfo:
      type: object
      required: [userEmail, organizationName]
      properties:
        userEmail:
          type: string
        organizationName:
          type: string
    AccountRegistrationInfoMessageBody:
      type: object
      required: [data]
      properties:
        data:
          $ref: '#/components/schemas/AccountRegistrationInfo'
    UserCredentials:
      type: object
      required: [login, password]
      properties:
        login:
          type: string
        password:
          type: string
          format: password
    UserCredentialsMessageBody:
      type: object
      required: [data]
      properties:
        data:
          $ref: '#/components/schemas/UserCredentials'
    UserAccountInfo:
      type: object
      required: [userEmail, locale]
      properties:
        username:
          type: string
        userEmail:
          type: string
        locale:
          type: string
    UserAccountInfoMessageBody:
      type: object
      required: [data]
      properties:
        data:
          $ref: '#/components/schemas/UserAccountInfo'
    AuthenticationResult:
      type: object
      required: [authorizationToken]
      properties:
        authorizationToken:
          type: string
    AuthenticationResultMessageBody:
      type: object
      required: [data]
      properties:
        data:
          $ref: '#/components/schemas/AuthenticationResult'
    PasswordChange:
      type: object
      required: [currentPassword, newPassword]
      properties:
        currentPassword:
          type: string
        newPassword:
          type: string
    PasswordChangeMessageBody:
      type: object
      required: [data]
      properties:
        data:
          $ref: '#/components/schemas/PasswordChange'
    LocaleChange:
      type: object
      required: [locale]
      properties:
        locale:
          type: string
          description: New locale settings in ICU format
    LocaleChangeMessageBody:
      type: object
      required: [data]
      properties:
        data:
          $ref: '#/components/schemas/LocaleChange'
    UserInfo:
      type: object
      required: [userEmail, organization, organizationRole]
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        userEmail:
          type: string
        organization:
          type: string
        organizationRoles:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/OrganizationRole'
    UserInfoCollectionMessageBody:
      type: object
      required: [data]
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserInfo'
    OrganizationMember:
      type: object
      required: [id, username, organizationRole]
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        organizationRole:
          $ref: '#/components/schemas/OrganizationRole'
    OrganizationMemberCollectionMessageBody:
      type: object
      required: [data]
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationMember'
    UserOrganization:
      type: object
      required: [id, name, organizationRole]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        organizationRole:
          $ref: '#/components/schemas/OrganizationRole'
    UserOrganizationCollectionMessageBody:
      type: object
      required: [data]
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserOrganization'
    DataStore:
      type: object
      required: [name]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        size:
          type: integer
        createdAt:
          type: string
          format: date-time
    DataStoreMessageBody:
      type: object
      required: [data]
      properties:
        data:
          $ref: '#/components/schemas/DataStore'
    DataStoreCollectionMessageBody:
      type: object
      required: [data]
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/DataStore'
    DataConnector:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        lastConnectionStatus:
          type: boolean
        lastConnectionStatusTimestamp:
          type: string
        properties:
          type: object
          additionalProperties:
            type: string
    DataConnectorMessageBody:
      type: object
      required: [data]
      properties:
        data:
          $ref: '#/components/schemas/DataConnector'
    DataConnectorCollectionMessageBody:
      type: object
      required: [data]
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/DataConnector'
    EtlProcessType:
      type: string
      enum: [automatic]
    AbstractEtlProcess:
      oneOf:
        - $ref: '#/components/schemas/AutomaticEtlProcess'
      discriminator:
        propertyName: type
        mapping:
          automatic: '#/components/schemas/AutomaticEtlProcess'
    AutomaticEtlProcess:
      allOf:
        - $ref: '#/components/schemas/EtlProcess'
        - type: object
          properties:
            caseNotion:
              $ref: '#/components/schemas/CaseNotion'
    EtlProcess:
      type: object
      required: [name, type, dataConnectorId]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        dataConnectorId:
          type: string
          format: uuid
        type:
          $ref: '#/components/schemas/EtlProcessType'
    EtlProcessMessageBody:
      type: object
      required: [data]
      properties:
        data:
          $ref: '#/components/schemas/AbstractEtlProcess'
    EtlProcessCollectionMessageBody:
      type: object
      required: [data]
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/AbstractEtlProcess'
    DataConnectorConnectivity:
      type: object
      required: [isValid]
      properties:
        isValid:
          type: boolean
    DataConnectorConnectivityMessageBody:
      type: object
      required: [data]
      properties:
        data:
          $ref: '#/components/schemas/DataConnectorConnectivity'
    Workspace:
      type: object
      required: [name]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    WorkspaceMessageBody:
      type: object
      required: [data]
      properties:
        data:
          $ref: '#/components/schemas/Workspace'
    WorkspaceCollectionMessageBody:
      type: object
      required: [data]
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Workspace'
    Component:
      type: object
      required: [id, query, type]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        query:
          type: string
        type:
          $ref: '#/components/schemas/ComponentType'
        layout:
          $ref: '#/components/schemas/LayoutElement'
    LayoutElement:
      type: object
      properties:
        x:
          type: number
        y:
          type: number
        width:
          type: number
        height:
          type: number
    LayoutCollectionMessageBody:
      type: object
      required: [data]
      properties:
        data:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/LayoutElement'
    AbstractComponent:
      oneOf:
        - $ref: '#/components/schemas/KpiComponent'
        - $ref: '#/components/schemas/CausalNetComponent'
      discriminator:
        propertyName: type
        mapping:
          kpi: '#/components/schemas/KpiComponent'
          causalNet: '#/components/schemas/CausalNetComponent'
    ComponentData:
      type: object
      required: [type]
      properties:
        type:
          $ref: '#/components/schemas/ComponentType'
    AbstractComponentData:
      oneOf:
        - $ref: '#/components/schemas/KpiComponentData'
        - $ref: '#/components/schemas/CausalNetComponentData'
      discriminator:
        propertyName: type
        mapping:
          kpi: '#/components/schemas/KpiComponentData'
          causalNet: '#/components/schemas/CausalNetComponentData'
    KpiComponentData:
      allOf:
        - $ref: '#/components/schemas/ComponentData'
        - type: object
          properties:
            value:
              type: number
    KpiComponent:
      allOf:
        - $ref: '#/components/schemas/Component'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/KpiComponentData'
            customizationData:
              type: object
    CausalNetComponentData:
      allOf:
        - $ref: '#/components/schemas/ComponentData'
        - type: object
          required: [nodes, edges]
          properties:
            nodes:
              type: array
              items:
                type: object
                required: [id, splits, joins]
                properties:
                  id:
                    type: string
                  splits:
                    type: array
                    items:
                      type: array
                      items:
                        type: string
                  joins:
                    type: array
                    items:
                      type: array
                      items:
                        type: string
            edges:
              type: array
              items:
                type: object
                required: [sourceNodeId, targetNodeId]
                properties:
                  sourceNodeId:
                    type: string
                  targetNodeId:
                    type: string
    CausalNetComponent:
      allOf:
        - $ref: '#/components/schemas/Component'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/CausalNetComponentData'
            customizationData:
              type: object
              properties:
                layout:
                  type: array
                  items:
                    type: object
                    required: [id, x, y]
                    properties:
                      id:
                        type: string
                      x:
                        type: number
                      y:
                        type: number
    ComponentMessageBody:
      type: object
      required: [data]
      properties:
        data:
          $ref: '#/components/schemas/AbstractComponent'
    ComponentDataMessageBody:
      type: object
      required: [data]
      properties:
        data:
          $ref: '#/components/schemas/AbstractComponentData'
    ComponentCollectionMessageBody:
      type: object
      required: [data]
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/AbstractComponent'
    Group:
      type: object
      required: [name, groupRole, isImplicit, organizationId]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        isImplicit:
          type: boolean
          description: Indicates whether the group was explicitly created by a user or implicitly created by the system (default groups)
        organizationId:
          type: string
          format: uuid
        groupRole:
          $ref: '#/components/schemas/GroupRole'
    GroupMessageBody:
      type: object
      required: [data]
      properties:
        data:
          $ref: '#/components/schemas/Group'
    GroupCollectionMessageBody:
      type: object
      required: [data]
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Group'
    Organization:
      type: object
      required: [name, isPrivate]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        contact:
          type: string
          description: An address associated with the organization
        isPrivate:
          type: boolean
          description: Indicates whether the organization can be accessed by ancestral organizations members
    OrganizationMessageBody:
      type: object
      required: [data]
      properties:
        data:
          $ref: '#/components/schemas/Organization'
    OrganizationCollectionMessageBody:
      type: object
      required: [data]
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Organization'
    QueryResultCollectionMessageBody:
      type: object
      required: [data]
      properties:
        data:
          type: array
          items:
            type: object
    CaseNotion:
      type: object
      required: [classes, edges]
      properties:
        classes:
          type: object
          additionalProperties:
            type: string
        edges:
          type: array
          items:
            type: object
            required: [sourceClassId, targetClassId]
            properties:
              sourceClassId:
                type: string
              targetClassId:
                type: string
    CaseNotionCollectionMessageBody:
      type: object
      required: [data]
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/CaseNotion'
    CaseNotionMessageBody:
      type: object
      required: [data]
      properties:
        data:
          $ref: '#/components/schemas/CaseNotion'
  responses:
    BadRequest:
      description: Invalid request body
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/ErrorMessageBody'
    Unauthorized:
      description: The user is not authenticated
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/ErrorMessageBody'
    Forbidden:
      description: The user is not authorized
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/ErrorMessageBody'
    NotFound:
      description: The specified resource was not found
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/ErrorMessageBody'
    Conflict:
      description: The resource with the sepcified identifier already exists
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/ErrorMessageBody'
    ServiceUnavailable:
      description: The server is not ready to handle the request
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/ErrorMessageBody'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
