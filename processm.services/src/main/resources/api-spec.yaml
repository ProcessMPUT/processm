openapi: 3.0.1
info:
  title: Processm
  description: Description of api methods used in processm.
  version: 1.0.0
servers:
  - url: /api
tags:
  - name: users
    description: User registration and session management
  - name: workspaces
    description: User workspaces management
  - name: groups
    description: User groups and groups membership management
  - name: organizations
    description: User organizations and organizations membership management
paths:
  /users:
    get:
      tags:
        - users
      summary: Get users associated with the current user by organization membership
      operationId: getUsers
      responses:
        '200':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserInfoCollectionMessageBody'
      security:
        - bearerAuth: []
    post:
      tags:
        - users
      summary: Register account
      operationId: createAccount
      requestBody:
        description: User email and organization name
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/AccountRegistrationInfoMessageBody'
        required: true
      responses:
        '201':
          description: Successful operation
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
  /users/session:
    post:
      tags:
        - users
      summary: User authentication
      operationId: signUserIn
      parameters:
        - in: header
          name: Authorization
          description: Expired authentication token
          required: false
          schema:
            type: string
      requestBody:
        description: User account credentials
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UserCredentialsMessageBody'
        required: false
      responses:
        '201':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/AuthenticationResultMessageBody'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - users
      summary: Session termination
      operationId: signUserOut
      responses:
        '204':
          description: user successfully logged out
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /users/me:
    get:
      tags:
        - users
      summary: Get details about current user
      operationId: getUserAccountDetails
      responses:
        '200':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserAccountInfoMessageBody'
      security:
        - bearerAuth: []
  /users/me/password:
    patch:
      tags:
        - users
      summary: Change user password
      operationId: changeUserPassword
      requestBody:
        description: Current and new password
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/PasswordChangeMessageBody'
        required: true
      responses:
        '200':
          description: Successful operation
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /users/me/locale:
    patch:
      tags:
        - users
      summary: Change user locale
      operationId: changeUserLocale
      requestBody:
        description: New locale in ICU format (e.g. en_US)
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/LocaleChangeMessageBody'
        required: true
      responses:
        '200':
          description: Successful operation
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /users/me/organizations:
    get:
      tags:
        - users
      summary: Get organizations which the current user is a member of
      operationId: getUserOrganizations
      responses:
        '200':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserOrganizationCollectionMessageBody'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /workspaces:
    get:
      tags:
        - workspaces
      summary: Get workspaces which the current user has access to
      operationId: getWorkspaces
      responses:
        '200':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/WorkspaceCollectionMessageBody'
      security:
        - bearerAuth: []
    post:
      tags:
        - workspaces
      summary: Create workspace
      operationId: createWorkspace
      requestBody:
        description: Workspace details
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/WorkspaceMessageBody'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/WorkspaceMessageBody'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
  /workspaces/{workspaceId}:
    parameters:
      - name: workspaceId
        in: path
        description: Workspace ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - workspaces
      summary: Get specified workspace
      operationId: getWorkspace
      responses:
        '200':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/WorkspaceMessageBody'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
    put:
      tags:
        - workspaces
      summary: Update specified workspace
      operationId: updateWorkspace
      requestBody:
        description: Workspace details to update
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/WorkspaceMessageBody'
        required: true
      responses:
        '204':
          description: Successful operation
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
    delete:
      tags:
        - workspaces
      summary: Remove specified workspace
      operationId: deleteWorkspace
      responses:
        '204':
          description: Successful operation
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /groups:
    get:
      tags:
        - groups
      summary: Get groups belonging to the current user's organization
      operationId: getGroups
      responses:
        '200':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/GroupCollectionMessageBody'
      security:
        - bearerAuth: []
    post:
      tags:
        - groups
      summary: Create user group
      operationId: createGroup
      requestBody:
        description: Group details
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/GroupMessageBody'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/GroupMessageBody'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
  /groups/{groupId}:
    parameters:
      - name: groupId
        in: path
        description: Group ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - groups
      summary: Get specified group
      operationId: getGroup
      responses:
        '200':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/GroupMessageBody'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
    put:
      tags:
        - groups
      summary: Update specified group
      operationId: updateGroup
      requestBody:
        description: Group details
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/GroupMessageBody'
        required: true
      responses:
        '204':
          description: Successful operation
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
    delete:
      tags:
        - groups
      summary: Remove user group
      operationId: removeGroup
      responses:
        '204':
          description: Successful operation
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /groups/{groupId}/members:
    parameters:
      - name: groupId
        in: path
        description: Group ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - groups
      summary: Get members of the specified group
      operationId: getGroupMembers
      responses:
        '200':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserInfoCollectionMessageBody'
      security:
        - bearerAuth: []
    post:
      tags:
        - groups
      summary: Add new member to the specified group
      operationId: addGroupMember
      requestBody:
        description: New member ID
        content:
          'application/json':
            schema:
              description: User ID
              type: string
              format: uuid
        required: true
      responses:
        '201':
          description: Successful operation
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /groups/{groupId}/members/{userId}:
    parameters:
      - name: groupId
        in: path
        description: Group ID
        required: true
        schema:
          type: string
          format: uuid
      - name: userId
        in: path
        description: User ID
        required: true
        schema:
          type: string
          format: uuid
    delete:
      tags:
        - groups
      summary: Remove member from the specified group
      operationId: removeGroupMember
      responses:
        '204':
          description: Successful operation
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /groups/{groupId}/subgroups:
    parameters:
      - name: groupId
        in: path
        description: Group ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - groups
      summary: Get subgroups of the specified group
      operationId: getSubgroups
      responses:
        '200':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/GroupCollectionMessageBody'
      security:
        - bearerAuth: []
    post:
      tags:
        - groups
      summary: Create new subgroup
      operationId: createSubgroup
      requestBody:
        description: Subgroup details
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/GroupMessageBody'
        required: true
      responses:
        '201':
          description: Successful operation
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
      security:
        - bearerAuth: []
  /groups/{groupId}/subgroups/{subgroupId}:
    parameters:
      - name: groupId
        in: path
        description: Group ID
        required: true
        schema:
          type: string
          format: uuid
      - name: subgroupId
        in: path
        description: Subgroup ID
        required: true
        schema:
          type: string
          format: uuid
    delete:
      tags:
        - groups
      summary: Remove speciified subgroup
      operationId: removeSubgroup
      responses:
        '204':
          description: Successful operation
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /organizations:
    get:
      tags:
        - organizations
      summary: Get organizations
      operationId: getOrganizations
      responses:
        '200':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/OrganizationCollectionMessageBody'
      security:
        - bearerAuth: []
    post:
      tags:
        - organizations
      summary: Create organization
      operationId: createOrganization
      requestBody:
        description: Organization details
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/OrganizationMessageBody'
        required: true
      responses:
        '201':
          description: Successful operation
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
      security:
        - bearerAuth: []
  /organizations/{organizationId}:
    parameters:
      - name: organizationId
        in: path
        description: Organization ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - organizations
      summary: Get specified organization
      operationId: getOrganization
      responses:
        '200':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/OrganizationMessageBody'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
    put:
      tags:
        - organizations
      summary: Update specified organization
      operationId: updateOrganization
      requestBody:
        description: Organization details
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/OrganizationMessageBody'
        required: true
      responses:
        '204':
          description: Successful operation
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
    delete:
      tags:
        - organizations
      summary: Remove specified organization
      operationId: removeOrganization
      responses:
        '204':
          description: Successful operation
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /organizations/{organizationId}/members:
    parameters:
      - name: organizationId
        in: path
        description: Organization ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - organizations
      summary: Get members of the specified organization
      operationId: getOrganizationMembers
      responses:
        '200':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/OrganizationMemberCollectionMessageBody'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
    post:
      tags:
        - organizations
      summary: Add new member to the specified organization
      operationId: addOrganizationMember
      requestBody:
        description: New member username
        content:
          'application/json':
            schema:
              description: Username
              type: string
        required: true
      responses:
        '201':
          description: Successful operation
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
      security:
        - bearerAuth: []
  /organizations/{organizationId}/members/{userId}:
    parameters:
      - name: organizationId
        in: path
        description: Organization ID
        required: true
        schema:
          type: string
          format: uuid
      - name: userId
        in: path
        description: User ID
        required: true
        schema:
          type: string
          format: uuid
    delete:
      tags:
        - organizations
      summary: Remove member from the specified organization
      operationId: removeOrganizationMember
      responses:
        '204':
          description: uccessful operation
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /organizations/{organizationId}/groups:
    parameters:
      - name: organizationId
        in: path
        description: Organization ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - organizations
      summary: Get groups associated with the specified organization
      operationId: getOrganizationGroups
      responses:
        '200':
          description: Successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/GroupCollectionMessageBody'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
components:
  schemas:
    ErrorMessageBody:
      type: object
      required: [error]
      properties:
        error:
          description: Error details
          type: string
    OrganizationRole:
      type: string
      enum: [owner, writer, reader]
    GroupRole:
      type: string
      enum: [owner, writer, reader]
    AccountRegistrationInfo:
      type: object
      required: [userEmail, organizationName]
      properties:
        userEmail:
          type: string
        organizationName:
          type: string
    AccountRegistrationInfoMessageBody:
      type: object
      required: [data]
      properties:
        data:
          $ref: '#/components/schemas/AccountRegistrationInfo'
    UserCredentials:
      type: object
      required: [login, password]
      properties:
        login:
          type: string
        password:
          type: string
          format: password
    UserCredentialsMessageBody:
      type: object
      required: [data]
      properties:
        data:
          $ref: '#/components/schemas/UserCredentials'
    UserAccountInfo:
      type: object
      required: [userEmail, locale]
      properties:
        username:
          type: string
        userEmail:
          type: string
        locale:
          type: string
    UserAccountInfoMessageBody:
      type: object
      required: [data]
      properties:
        data:
          $ref: '#/components/schemas/UserAccountInfo'
    AuthenticationResult:
      type: object
      required: [authorizationToken]
      properties:
        authorizationToken:
          type: string
    AuthenticationResultMessageBody:
      type: object
      required: [data]
      properties:
        data:
          $ref: '#/components/schemas/AuthenticationResult'
    PasswordChange:
      type: object
      required: [currentPassword, newPassword]
      properties:
        currentPassword:
          type: string
        newPassword:
          type: string
    PasswordChangeMessageBody:
      type: object
      required: [data]
      properties:
        data:
          $ref: '#/components/schemas/PasswordChange'
    LocaleChange:
      type: object
      required: [locale]
      properties:
        locale:
          type: string
          description: New locale settings in ICU format
    LocaleChangeMessageBody:
      type: object
      required: [data]
      properties:
        data:
          $ref: '#/components/schemas/LocaleChange'
    UserInfo:
      type: object
      required: [userEmail, organization, organizationRole]
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        userEmail:
          type: string
        organization:
          type: string
        organizationRoles:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/OrganizationRole'
    UserInfoCollectionMessageBody:
      type: object
      required: [data]
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserInfo'
    OrganizationMember:
      type: object
      required: [id, username, organizationRole]
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        organizationRole:
          $ref: '#/components/schemas/OrganizationRole'
    OrganizationMemberCollectionMessageBody:
      type: object
      required: [data]
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationMember'
    UserOrganization:
      type: object
      required: [id, name, organizationRole]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        organizationRole:
          $ref: '#/components/schemas/OrganizationRole'
    UserOrganizationCollectionMessageBody:
      type: object
      required: [data]
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserOrganization'
    Workspace:
      type: object
      required: [name]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    WorkspaceMessageBody:
      type: object
      required: [data]
      properties:
        data:
          $ref: '#/components/schemas/Workspace'
    WorkspaceCollectionMessageBody:
      type: object
      required: [data]
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Workspace'
    Group:
      type: object
      required: [name, groupRole, isImplicit, organizationId]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        isImplicit:
          type: boolean
          description: Indicates whether the group was explicitly created by a user or implicitly created by the system (default groups)
        organizationId:
          type: string
          format: uuid
        groupRole:
          $ref: '#/components/schemas/GroupRole'
    GroupMessageBody:
      type: object
      required: [data]
      properties:
        data:
          $ref: '#/components/schemas/Group'
    GroupCollectionMessageBody:
      type: object
      required: [data]
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Group'
    Organization:
      type: object
      required: [name, isPrivate]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        contact:
          type: string
          description: An address associated with the organization
        isPrivate:
          type: boolean
          description: Indicates whether the organization can be accessed by ancestral organizations members
    OrganizationMessageBody:
      type: object
      required: [data]
      properties:
        data:
          $ref: '#/components/schemas/Organization'
    OrganizationCollectionMessageBody:
      type: object
      required: [data]
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Organization'
  responses:
    BadRequest:
      description: Invalid request body
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/ErrorMessageBody'
    Unauthorized:
      description: The user is not authenticated
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/ErrorMessageBody'
    Forbidden:
      description: The user is not authorized
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/ErrorMessageBody'
    NotFound:
      description: The specified resource was not found
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/ErrorMessageBody'
    Conflict:
      description: The resource with the sepcified identifier already exists
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/ErrorMessageBody'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
