/**
 * Processm
 * Description of api methods used in processm.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package processm.services.api

import io.ktor.server.locations.*
import java.util.*

@KtorExperimentalLocationsAPI
object Paths {
    /**
     * Server-side-stored configuration for GUI.
     */
    @Location("/config")
    class Config

    /**
     * Group
     *
     * @param groupId Group ID
     */
    @Location("/organizations/{organizationId}/groups/{groupId}")
    class Group(val organizationId: UUID, val groupId: UUID)

    /**
     * Members of the specified group
     *
     * @param groupId Group ID
     */
    @Location("/organizations/{organizationId}/groups/{groupId}/members")
    class GroupMembers(val organizationId: UUID, val groupId: UUID)

    /**
     * Objects the group is a sole owner of
     *
     * @param groupId Group ID
     */
    @Location("/organizations/{organizationId}/groups/{groupId}/sole-ownership")
    class GroupSoleOwnership(val organizationId: UUID, val groupId: UUID)

    /**
     * Groups og the current user&#39;s organization
     *
     */
    @Location("/organizations/{organizationId}/groups")
    class Groups(val organizationId: UUID)

    /**
     * Subgroups of the specified group
     *
     * @param groupId Group ID
     */
    @Location("/organizations/{organizationId}/groups/{groupId}/subgroups")
    class Subgroups(val organizationId: UUID, val groupId: UUID)

    /**
     * Mmber from the specified group
     *
     * @param groupId Group ID
     * @param userId User ID
     */
    @Location("/organizations/{organizationId}/groups/{groupId}/members/{userId}")
    class GroupMember(val organizationId: UUID, val groupId: UUID, val userId: UUID)

    /**
     * Subgroup of a group.
     *
     * @param groupId Group ID
     * @param subgroupId Subgroup ID
     */
    @Location("/organizations/{organizationId}/groups/{groupId}/subgroups/{subgroupId}")
    class Subgroup(val organizationId: UUID, val groupId: UUID, val subgroupId: UUID)

    /**
     * Organization.
     *
     * @param organizationId Organization ID
     */
    @Location("/organizations/{organizationId}")
    class Organization(val organizationId: UUID)

    @Location("/organizations/{organizationId}/suborganizations/{subOrganizationId}")
    class SubOrganization(val organizationId: UUID, val subOrganizationId: UUID)

    @Location("/organizations/{organizationId}/suborganizations")
    class SubOrganizations(val organizationId: UUID)

    /**
     * Groups associated with the specified organization.
     *
     * @param organizationId Organization ID
     */
    @Location("/organizations/{organizationId}/groups")
    class OrganizationGroups(val organizationId: UUID)

    /**
     * Members of the specified organization
     *
     * @param organizationId Organization ID
     */
    @Location("/organizations/{organizationId}/members")
    class OrganizationMembers(val organizationId: UUID)

    /**
     * Objects the groups of the organization are the sole owners of
     *
     * @param organizationId Organization ID
     */
    @Location("/organizations/{organizationId}/sole-ownership")
    class OrganizationSoleOwnership(val organizationId: UUID)

    /**
     * List of organizations
     */
    @Location("/organizations")
    class Organizations

    /**
     * A member of the specified organization
     *
     * @param organizationId Organization ID
     * @param userId User ID
     */
    @Location("/organizations/{organizationId}/members/{userId}")
    class OrganizationMember(val organizationId: UUID, val userId: UUID)

    /**
     * Data stores
     */
    @Location("/data-stores")
    class DataStores()

    /**
     * Logs stored in [dataStoreId].
     *
     * @param dataStoreId Data store ID
     */
    @Location("/data-stores/{dataStoreId}/logs")
    class Logs(val dataStoreId: UUID)


    /**
     * Log stored in [dataStoreId] and specified by [identityId].
     *
     * @param dataStoreId Data store ID
     * @param identityId Log's identity:id attribute value
     */
    @Location("/data-stores/{dataStoreId}/logs/{identityId}")
    class Log(val dataStoreId: UUID, val identityId: UUID)

    /**
     * Data store specified by [dataStoreId].
     *
     * @param dataStoreId Data store ID
     */
    @Location("/data-stores/{dataStoreId}")
    class DataStore(val dataStoreId: UUID)

    /**
     * Data connectors assigned to [dataStoreId].
     *
     * @param dataStoreId Data store ID
     */
    @Location("/data-stores/{dataStoreId}/data-connectors")
    class DataConnectors(val dataStoreId: UUID)

    /**
     * Data connector assigned to [dataStoreId] and specified by [dataConnectorId].
     *
     * @param dataStoreId Data store ID
     * @param dataConnectorId Data connector ID
     */
    @Location("/data-stores/{dataStoreId}/data-connectors/{dataConnectorId}")
    class DataConnector(val dataStoreId: UUID, val dataConnectorId: UUID)

    /**
     * Tests connectivity with the specified connection properties.
     *
     * @param dataStoreId Data store ID
     */
    @Location("/data-stores/{dataStoreId}/data-connectors/test")
    class ConnectionTest(val dataStoreId: UUID)

    /**
     * Case notions related to the specified [dataConnectorId].
     *
     * @param dataStoreId Data store ID
     * @param dataConnectorId Data connector ID
     */
    @Location("/data-stores/{dataStoreId}/data-connectors/{dataConnectorId}/case-notions")
    class CaseNotionSuggestions(val dataStoreId: UUID, val dataConnectorId: UUID)


    @Location("/data-stores/{dataStoreId}/data-connectors/{dataConnectorId}/relationship-graph")
    class RelationshipGraph(val dataStoreId: UUID, val dataConnectorId: UUID)

    /**
     * ETL processes assigned to [dataStoreId].
     *
     * @param dataStoreId Data store ID
     */
    @Location("/data-stores/{dataStoreId}/etl-processes")
    class EtlProcesses(val dataStoreId: UUID)

    /**
     * ETL process assigned to [dataStoreId] and specified by [etlProcessId].
     *
     * @param dataStoreId Data store ID
     * @param etlProcessId Data connector ID
     */
    @Location("/data-stores/{dataStoreId}/etl-processes/{etlProcessId}")
    class EtlProcess(val dataStoreId: UUID, val etlProcessId: UUID)


    @Location("/data-stores/{dataStoreId}/sampling-etl-processes/")
    class SamplingEtlProcess(val dataStoreId: UUID, val nComponents: Int? = null)

    /**
     * Get details about current user
     *
     */
    @Location("/users/me")
    class UserAccountDetails

    /**
     * Get organizations which the current user is a member of
     *
     */
    @Location("/users/me/organizations")
    class UserOrganizations

    /**
     * Get organizations which the current user is a member of
     *
     */
    @Location("/users")
    class Users

    /**
     * Get users associated with the current user by organization membership
     *
     */
    @Location("/users/session")
    class UsersSession

    @Location("/reset-password/request")
    class ResetPasswordRequest

    @Location("/reset-password/{token}")
    class ResetPassword(val token: UUID)

    /**
     * Get, update or remove the specified workspace
     *
     * @param workspaceId Workspace ID
     */
    @Location("/workspaces/{workspaceId}")
    class Workspace(val workspaceId: UUID)

    /**
     * Get or update the specified component in the specified workspace
     *
     * @param workspaceId Workspace ID
     * @param componentId Component ID
     */
    @Location("/workspaces/{workspaceId}/components/{componentId}")
    class WorkspaceComponent(val workspaceId: UUID, val componentId: UUID)

    /**
     * Get data of the specified component in the specified workspace
     *
     * @param workspaceId Workspace ID
     * @param componentId Component ID
     */
    @Location("/workspaces/{workspaceId}/components/{componentId}/data")
    class WorkspaceComponentData(val workspaceId: UUID, val componentId: UUID)

    /**
     * Get all components available to the calling user in the specified workspace
     *
     * @param workspaceId Workspace ID
     */
    @Location("/workspaces/{workspaceId}/components")
    class WorkspaceComponents(val workspaceId: UUID)

    /**
     * Update size and position of the specified components
     *
     * @param workspaceId Workspace ID
     */
    @Location("/workspaces/{workspaceId}/layout")
    class WorkspaceLayout(val workspaceId: UUID)

    /**
     * Get all workspaces available to the calling user
     */
    @Location("/workspaces")
    class Workspaces

    /**
     * New workspace linked to the specified organization
     *
     * @param organizationId Organization ID
     */
    @Location("/organizations/{organizationId}/workspace")
    class NewWorkspace(val organizationId: UUID)

    /**
     * Get the whole ACL for the given URN
     */
    @Location("/acl/{urn}")
    class ACL(val urn: String)

    /**
     * Modify/delete the entry related to the given groupId in the ACL for the given URN
     */
    @Location("/acl/{urn}/ace/{groupId}")
    class ACE(val urn: String, val groupId: UUID)

    /**
     * List groups that could be plausibly added to the ACL for the given URN by the current user
     */
    @Location("/acl/{urn}/available-groups")
    class AvailableGroups(val urn: String)

    /**
     * 204 if the current user can modify the ACL for the given URN, 403 otherwise
     */
    @Location("/acl/{urn}/can-modify")
    class CanModifyACL(val urn: String)
}
