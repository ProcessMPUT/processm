package processm.core.comparators

import processm.core.models.causalnet.Model
import processm.core.verifiers.CausalNetVerifier

/**
 * Compares loop-free traces (i.e., nodes visited in loop-free valid sequences) of [left] and [right]
 */
class CausalNetTraceComparison(val left: Model, val right: Model) {

    /**
     * Verification report of [left]
     */
    val leftVerificationReport = CausalNetVerifier().verify(left)

    /**
     * Verification report of [right]
     */
    val rightVerficiationReport = CausalNetVerifier().verify(right)

    /**
     * Traces generated by [left]
     */
    val leftTraces by lazy {
        leftVerificationReport.validLoopFreeSequences.map { seq -> seq.map { it.a } }.toSet()
    }

    /**
     * Traces generated by [right]
     */
    val rightTraces by lazy {
        rightVerficiationReport.validLoopFreeSequences.map { seq -> seq.map { it.a } }.toSet()
    }

    /**
     * Traces generated by [left], but not by [right]
     */
    val leftNotRight by lazy {
        leftTraces - rightTraces
    }

    /**
     * Traces generated by [right], but not by [left]
     */
    val rightNotLeft by lazy {
        rightTraces - leftTraces
    }

    /**
     * `true` if both models generate the same sets of traces
     */
    val equivalent
        get() = leftSubsumedByRight && rightSubsumedByLeft

    /**
     * `true` if there are no traces generated by [left] that are not generated by [right]
     */
    val leftSubsumedByRight
        get() = leftNotRight.none()
    
    /**
     * `true` if there are no traces generated by [right] that are not generated by [left]
     */
    val rightSubsumedByLeft
        get() = rightNotLeft.none()
}