package processm.core.querylanguage

import org.antlr.v4.runtime.RecognitionException
import processm.helpers.AbstractLocalizedException
import processm.logging.logger
import java.util.*

/**
 * A PQL error detected by the ANTLR
 */
class PQLParserException(
    val problem: Problem,
    val line: Int,
    val charPositionInLine: Int,
    val offendingToken: TokenSequence,
    val expectedTokens: Collection<String>?,
    originalMessage: String?,
    val baseException: RecognitionException?
) : AbstractLocalizedException(
    "Line $line position $charPositionInLine: $originalMessage (offendingToken='$offendingToken' expectedTokens='$expectedTokens' problem=$problem)"
) {
    override fun localizedMessage(locale: Locale): String = try {
        val prefixFormatString = getFormatString(locale, "PQLErrorPrefix")
        val formatString = getFormatString(locale, problem.toString())
        String.format(locale, prefixFormatString, line, charPositionInLine) +
                ": " +
                String.format(locale, formatString, offendingToken, expectedTokens?.joinToString())
    } catch (e: Exception) {
        logger().error("An exception was thrown while preparing localized exception", e)
        message ?: problem.toString()
    }

    enum class Problem {
        Unknown,

        /**
         * @see org.antlr.v4.runtime.FailedPredicateException
         */
        FailedPredicate,

        /**
         * @see org.antlr.v4.runtime.InputMismatchException
         */
        InputMismatch,

        /**
         * @see org.antlr.v4.runtime.LexerNoViableAltException
         */
        LexerNoViableAlt,

        /**
         * @see org.antlr.v4.runtime.NoViableAltException
         */
        NoViableAlt,


        /**
         * Generated by [Query.ErrorStrategy.reportMissingToken]
         */
        MissingToken,

        /**
         * Generated by [Query.ErrorStrategy.reportUnwantedToken]
         */
        UnwantedToken,
    }
}
