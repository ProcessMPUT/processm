package processm.core.helpers

/**
 * A sequence with partial materialization
 *
 * Every element generated by the underlying sequence `base` is stored, so to avoid regenerating it.
 * Useful if generating elements is pricey. Intended usage with [withMemory] extension function.
 */
class SequenceWithMemory<T>(val base: Sequence<T>) : Sequence<T> {

    private val memory = ArrayList<T>()
    private val iterator = base.iterator()

    override fun iterator(): Iterator<T> {
        return object : Iterator<T> {
            private val memIt = memory.listIterator()
            override fun hasNext(): Boolean = memIt.hasNext() || iterator.hasNext()

            override fun next(): T =
                if (memIt.hasNext())
                    memIt.next()
                else
                    iterator.next().apply { memIt.add(this) }

        }
    }
}

/**
 * Adds partial materialization to the sequence. Use sparingly.
 */
inline fun <T> Sequence<T>.withMemory(): SequenceWithMemory<T> {
    return SequenceWithMemory(this)
}